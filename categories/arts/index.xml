<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arts on I&#39;m company</title>
    <link>http://blog.imcompany.cn/categories/arts/</link>
    <description>Recent content in arts on I&#39;m company</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>peng051410@126.com (Tomyli)</managingEditor>
    <webMaster>peng051410@126.com (Tomyli)</webMaster>
    <lastBuildDate>Wed, 08 Jan 2020 18:54:09 +0800</lastBuildDate>
    
	<atom:link href="http://blog.imcompany.cn/categories/arts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-ARTS-打卡第一天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-001/</link>
      <pubDate>Wed, 08 Jan 2020 18:54:09 +0800</pubDate>
      <author>peng051410@126.com (Tomyli)</author>
      <guid>http://blog.imcompany.cn/post/2020-arts-001/</guid>
      <description>Algorithm 题目描述 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
Example 输入123-&amp;gt;321 输入-123-&amp;gt;-321 输入120-&amp;gt;21
题目解答 import java.util.*; public class Solution1 { public int[] reverseNumber(int num) { int res = 0; while(num != 0) { int pod = num % 10; if(res &amp;gt; Integer.MAX_VALUE / 10 || (res == Integer.MAX_VALUE / 10 &amp;amp;&amp;amp; pod &amp;gt; 7)) { return 0; } if(res &amp;lt; Integer.MIN_VALUE / 10 || (res == Integer.MIN_VALUE / 10 &amp;amp;&amp;amp; pod &amp;lt; -8)) { return 0; } res = res * 10 + pod; num = num / 10; } return res; } } 此题主要考察对栈的使用，如果不使用其它辅助类，则要考虑Int的整数溢出问题。时间复杂度O(log(n))，空间复杂度为O(1)</description>
    </item>
    
    <item>
      <title>ARTS-打卡第一天</title>
      <link>http://blog.imcompany.cn/post/arts-001/</link>
      <pubDate>Thu, 09 May 2019 17:34:09 +0800</pubDate>
      <author>peng051410@126.com (Tomyli)</author>
      <guid>http://blog.imcompany.cn/post/arts-001/</guid>
      <description>Algorithm LeetCode 第一题
题目描述 给一个int数组，返回数组中两个数字相加的和是目标 数的下标。可以假设每个输入只有一个解决方案，并且不能使用同一个元素两次。
Example 给出nums = [2, 7, 11, 15], 目标数为9，则返回[0, 1]
题目解答 import java.util.*; public class Solution { public int[] twoSum(int[] nums, int target) { Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for(int i = 0; i &amp;lt; nums.length; i ++) { int second = target - nums[i]; if(map.containsKey(second)) { return new int[]{map.get(second), i}; } map.put(nums[i], i); } return new int[]{}; } } 相比两次循环的方式，这种处理的时间复杂度为O(n), 空间复杂度也为O(n).
Review Google Cloud Production Guideline，本文主要是针对Google的Colud平台事故进行了线上发布的总结指导（检查列表）。详细如下：</description>
    </item>
    
  </channel>
</rss>