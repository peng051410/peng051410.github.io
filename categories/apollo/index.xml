<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apollo on I&#39;m company</title>
    <link>http://blog.imcompany.cn/categories/apollo/</link>
    <description>Recent content in apollo on I&#39;m company</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>peng051410@126.com (Tomyli)</managingEditor>
    <webMaster>peng051410@126.com (Tomyli)</webMaster>
    <lastBuildDate>Mon, 01 Jul 2019 07:04:09 +0800</lastBuildDate>
    
	<atom:link href="http://blog.imcompany.cn/categories/apollo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apollo Client自定义问题拾遗</title>
      <link>http://blog.imcompany.cn/post/apollo-client-custom/</link>
      <pubDate>Mon, 01 Jul 2019 07:04:09 +0800</pubDate>
      <author>peng051410@126.com (Tomyli)</author>
      <guid>http://blog.imcompany.cn/post/apollo-client-custom/</guid>
      <description>由于公司很多服务要接入Apollo配置中心，并且对于项目的接入有网络要求，根据官方说明，需要自定义Client来完成
接入步骤 新建maven项目 在Idea中新建maven项目，基于quickstart构建
增加项目依赖 官方说明的建议在新的client中依赖Apollo官方的client，再根据业务进行扩展，所以maven依赖apollo-client，公司项目的网络访问需要通过L5来进行，所以还要依赖L5的jar，目前这个jar包没有maven坐标，只能以lib方式引入
自定义MetaServer 关键的部分，自定义满足公司网络条件的MetaServer，Apollo官网说明是实现MetaServerProvider且Order值小的Providor被使用，按照说明进行实现
Maven打包Client 执行 mvn clean install 进行打包，解压jar包发现就只有一个Providor的实现类，这样jar运行有问题。需要把新Client所有的依赖都打进jar包，在网上找了半天，需要在POM中增加maven的plugin的配置，如下：
&amp;lt;!-- 打包所有的maven依赖到jar包 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.1&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;shade&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;artifactSet&amp;gt; &amp;lt;excludes&amp;gt; &amp;lt;exclude&amp;gt;junit:junit&amp;lt;/exclude&amp;gt; &amp;lt;/excludes&amp;gt; &amp;lt;/artifactSet&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;!-- 添加依赖的非maven jar包 --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;com.googlecode.addjars-maven-plugin&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;addjars-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.5&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;add-jars&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;${basedir}/lib&amp;lt;/directory&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; 由于项目中使用了maven依赖与非maven依赖，所以上述的两个插件都要使用。增加了上面两个插件后再运行打包命令查看生成的jar就发现所有的依赖都在jar中了。
项目中使用Client 选择一个项目在测试环境进行配置调试，自定义的Meta Server一直没有生效，所以查找官方文档，由于自定义Providor是通过SPI方式实现的，所以正确的实现方式是新建resource文件夹，指定MetaServerProvider的真正实现类的带包名类才可以，哎，找了我好久。
后续操作 后续会把client上传到内部maven仓库，完善配置API，使业务方可以零配置来使用配置中心。
总结  Maven的打包机制还是不清晰，处理打包问题费了很多时间，要好好重新学习一下 Apollo的官方文档还需要再仔细阅读，有问题多查issue，因为可能有人已经遇到了 多读读源码，真正的体会大牛的软件设计思想  </description>
    </item>
    
  </channel>
</rss>