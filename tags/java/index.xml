<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on I&#39;m company</title>
    <link>http://blog.imcompany.cn/tags/java/</link>
    <description>Recent content in java on I&#39;m company</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>京ICP备17037246号</copyright>
    <lastBuildDate>Mon, 12 Dec 2022 19:14:00 +0800</lastBuildDate><atom:link href="http://blog.imcompany.cn/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JAVA中如何判断对象与类的关系之-instanceOf, Class.isInstance, Class.isAssignableFrom</title>
      <link>http://blog.imcompany.cn/post/java-check-object-class/</link>
      <pubDate>Mon, 12 Dec 2022 19:14:00 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/java-check-object-class/</guid>
      <description>前言 在开发中，常常会碰到检查JAVA对象是不是指定类型的情况，在JAVA中提供了以下几种方法实现此类需求: instanceOf Class.isInstance() Class.isAssignbleFrom() 今天对此三种实现进行具体学习</description>
    </item>
    
    <item>
      <title>Java枚举学习</title>
      <link>http://blog.imcompany.cn/post/java-enum/</link>
      <pubDate>Wed, 23 Nov 2022 12:01:00 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/java-enum/</guid>
      <description>枚举 枚举是指包含指定个数特定类型的实例类，所有枚举类默认都继承 java.lang.Enum ，枚举类是可序列化、可比较的 1 2 3 4 5 6 7 8 public enum Person { MAN, WOMAN; } public static void main(String[] args) { System.out.println(Person.MAN); } 1</description>
    </item>
    
    <item>
      <title>让好代码生生不息-更好的使用String</title>
      <link>http://blog.imcompany.cn/post/best-code-string/</link>
      <pubDate>Mon, 23 Aug 2021 14:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/best-code-string/</guid>
      <description>开发中常用的String操作 开发中经常用到的操作有： 格式化/日志格式化 字符串判断 字符串处理，常见的如处理字符串的第一个/最后一个字符 String.format Str</description>
    </item>
    
    <item>
      <title>让好代码生生不息-更好的对待NULL</title>
      <link>http://blog.imcompany.cn/post/best-code1/</link>
      <pubDate>Sat, 17 Jul 2021 16:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/best-code1/</guid>
      <description>什么样的代码是好代码 易读的代码，行云流水的代码 JAVA中的NULL处理 众所周知，在Java代码中总是少不了一堆的判null逻辑，在代码bug</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第十四天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-014/</link>
      <pubDate>Mon, 20 Apr 2020 09:12:41 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-014/</guid>
      <description>Algorithm 题目 题目描述 98.验证二叉搜索树，给定一个二叉树，判断其是否是一个有效的二叉搜索树。假设一个二叉搜索树具有如下特征： 节点的左子树只包含小于</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第十三天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-013/</link>
      <pubDate>Wed, 08 Apr 2020 21:45:56 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-013/</guid>
      <description>Algorithm 题目 题目描述 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第十二天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-012/</link>
      <pubDate>Mon, 30 Mar 2020 13:23:29 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-012/</guid>
      <description>Algorithm 题目 题目描述 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。242 valid anagram 题目解答 可以使用先排序后判断的方法来实现，这样的时间</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第十一天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-011/</link>
      <pubDate>Mon, 23 Mar 2020 09:49:04 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-011/</guid>
      <description>Algorithm 题目 题目描述 给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第十天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-010/</link>
      <pubDate>Mon, 16 Mar 2020 17:06:14 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-010/</guid>
      <description>Algorithm 题目 题目描述 设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。703 数据流中的第K大元素 题</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第九天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-009/</link>
      <pubDate>Sat, 07 Mar 2020 14:40:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-009/</guid>
      <description>Algorithm 题目一 题目描述 使用栈实现队列的操作：push(), peek(), pop(), empty()操作，只能使用标准的栈操作 &amp;ndash; 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第八天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-008/</link>
      <pubDate>Sat, 29 Feb 2020 14:00:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-008/</guid>
      <description>Algorithm 题目描述 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 Example 输入: [3,2,1,5,6,4] 和 k = 2</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第七天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-007/</link>
      <pubDate>Sat, 22 Feb 2020 14:30:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-007/</guid>
      <description>Algorithm 题目描述 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。258.各位相加 Example 输入: 38 输出: 2 解释: 各位相加的过程为：3 +</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第六天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-006/</link>
      <pubDate>Thu, 13 Feb 2020 19:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-006/</guid>
      <description>Algorithm 题目描述 设计你的循环队列实现，支持入队，出队，获取队首元素，获取队尾元素 题目解答 采用数组可以实现，由于要达到循环效果，主要要考虑队头与队尾</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第五天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-005/</link>
      <pubDate>Thu, 06 Feb 2020 11:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-005/</guid>
      <description>Algorithm 题目描述 给定一个只包括 &amp;lsquo;(&amp;rsquo;，&amp;rsquo;)&amp;rsquo;，&amp;rsquo;{&amp;rsquo;，&amp;rsquo;}&amp;r</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第四天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-004/</link>
      <pubDate>Sat, 01 Feb 2020 13:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-004/</guid>
      <description>Algorithm 题目描述 给定一个链表，判断链表中是否有环。 Example 输入：head = [3,2,0,-4], pos = 1 输出：true 解释：链表中有一个环，其尾部连接到第二个节点。 题目解答 首</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第三天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-003/</link>
      <pubDate>Fri, 24 Jan 2020 16:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-003/</guid>
      <description>Algorithm 题目描述 反转一个单链表。 Example 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL 输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL 题目解答 迭代解法 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution3 { public ListNode reverseList(ListNode head) { ListNode prev = null; ListNode current = head; while (current != null) { ListNode tempNode = current.next; current.next =</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第二天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-002/</link>
      <pubDate>Thu, 16 Jan 2020 19:04:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-002/</guid>
      <description>Algorithm 题目描述 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 Example 输入123-&amp;gt;true 输入-123</description>
    </item>
    
    <item>
      <title>2020-ARTS-打卡第一天</title>
      <link>http://blog.imcompany.cn/post/2020-arts-001/</link>
      <pubDate>Wed, 08 Jan 2020 18:54:09 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/2020-arts-001/</guid>
      <description>Algorithm 题目描述 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 Example 输入123-&amp;gt;321 输入-123-&amp;gt;-321 输入1</description>
    </item>
    
    <item>
      <title>JAVA8问题处理回顾-持续更新</title>
      <link>http://blog.imcompany.cn/post/java8-issue-review/</link>
      <pubDate>Sat, 24 Aug 2019 10:15:55 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/java8-issue-review/</guid>
      <description>金额累加问题 使用Reduce进行累加操作，参考这里 1 2 3 List&amp;lt;BigDecimal&amp;gt; bdList = new ArrayList&amp;lt;&amp;gt;(); //populate list BigDecimal result = bdList.stream().reduce(BigDecimal.ZERO, BigDecimal::add); 查找集合的最后一个元素 JAVA8的Stream只提供了Fin</description>
    </item>
    
    <item>
      <title>设计模式学习之代理模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/</link>
      <pubDate>Mon, 16 Jul 2018 21:08:28 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-dai-li-mo-shi/</guid>
      <description>说明 代理模式是设计模式中使用频率非常的高的模式，像日常生活中的房产中介、外卖平台都属于代理。代理模式就是在访问真正的业务之时不会直接与真正的</description>
    </item>
    
    <item>
      <title>设计模式学习之委托模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/</link>
      <pubDate>Sat, 07 Jul 2018 18:53:57 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-wei-tuo-mo-shi/</guid>
      <description>说明 委托模式不属于23种设计模式中，但是它在Spring框架中使用的很频繁，Spring的作用在Java的开发是非常大，所以需要学习一下委托</description>
    </item>
    
    <item>
      <title>设计模式学习之观察者</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/</link>
      <pubDate>Wed, 04 Jul 2018 20:31:41 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-guan-cha-zhe/</guid>
      <description>说明 观察者模式在日常开发中使用频率也是非常高的，它建立了对象与对象之间的关系，一个对象的行为改变会通知到另一个对象，被通知的对象根据通知做出</description>
    </item>
    
    <item>
      <title>设计模式学习之装饰器</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/</link>
      <pubDate>Mon, 02 Jul 2018 20:09:14 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-zhuang-shi-qi/</guid>
      <description>说明 装饰器设计模式是使用比较频繁的设计模式，它在不改变原物体的情况对原物体实现了功能的增加，原物体还是一个可单独使用的个体。在JAVA的类库</description>
    </item>
    
    <item>
      <title>设计模式学习之适配器</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/</link>
      <pubDate>Tue, 26 Jun 2018 21:30:17 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-gua-pei-qi/</guid>
      <description>说明 在前面的文章中介绍了一些关于支付相关的功能，现在转向登录，在早些时期的系统登录就是用户使用用户名与密码进行注册，注册成功后就可以进行登录</description>
    </item>
    
    <item>
      <title>设计模式学习之模板模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/</link>
      <pubDate>Mon, 25 Jun 2018 21:06:17 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-mo-ban-mo-shi/</guid>
      <description>说明 在一般实现处理用户支付订单时，通常都会在一个单独的回调项目中来处理用户的支付方式回调。一般情况下，回调的处理过程都是相似的，大体的步骤就</description>
    </item>
    
    <item>
      <title>设计模式学习之策略模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/</link>
      <pubDate>Wed, 20 Jun 2018 07:04:56 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-ce-lue-mo-shi/</guid>
      <description>说明 策略模式是设计模式中使用频率很高的模式，主要的就是实现对行为的包装，达到结果的方式有多种，使用者可以选择任何一个方式来得到想要结果，在增</description>
    </item>
    
    <item>
      <title>设计模式学习之工厂模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-gong-han-mo-shi/</link>
      <pubDate>Tue, 12 Jun 2018 21:33:40 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-gong-han-mo-shi/</guid>
      <description>说明 工厂设计模式是23种设计模式中使用频率非常高的，属于创建型模式。主要特点是实现了实体创建与使用的分离，达到了解耦的目的。工厂设计模式一般</description>
    </item>
    
    <item>
      <title>设计模式学习之原型模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-yuan-xing-mo-shi/</link>
      <pubDate>Sat, 09 Jun 2018 17:12:41 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-yuan-xing-mo-shi/</guid>
      <description>特点 原型设计模式就是系统中产生的每一个对象都不相同，通过原型来创建新的对象，原型模式属于创建型模式。 实现方式 一般情况可以通过对象克隆的方式来</description>
    </item>
    
    <item>
      <title>设计模式学习之单例模式</title>
      <link>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-dan-li-mo-shi/</link>
      <pubDate>Tue, 05 Jun 2018 16:36:08 +0800</pubDate>
      
      <guid>http://blog.imcompany.cn/post/she-ji-mo-shi-xue-xi-zhi-dan-li-mo-shi/</guid>
      <description>特点 单例模式就是确保在系统中只在一个实例提供功能。单例有好几种写法，主要有饿汉式、懒汉式、静态方法内部类、注册式单例。 饿汉式 饿汉式单例就是在</description>
    </item>
    
  </channel>
</rss>
